<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web前端-html5基础篇</title>
      <link href="/2020/07/20/web-qian-duan-html5-ji-chu-pian/"/>
      <url>/2020/07/20/web-qian-duan-html5-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTML-的历史"><a href="#一、HTML-的历史" class="headerlink" title="一、HTML 的历史"></a>一、HTML 的历史</h2><p> HTML, 超文本标记语言，英文全称是 Hyper Text Markup Language，由 Tim Berners-Lee 在 1982 年提出，它是互联网上应用最广泛的标记语言。HTML5 是指万维网的核心语言、标准通用标记语言下的一个应用超文本标记语言的第五次重大修改。HTML5 的设计目的是为了在移动设备上支持多媒体。新的语法特征被引进以支持这一点，引进了新的功能，可以真正改变用户与文档的交互方式。</p><h2 id="HTML5组成标签"><a href="#HTML5组成标签" class="headerlink" title="HTML5组成标签"></a>HTML5组成标签</h2><h2 id="h5之前基本标签类型"><a href="#h5之前基本标签类型" class="headerlink" title="h5之前基本标签类型"></a>h5之前基本标签类型</h2><h3 id="1-构成标签"><a href="#1-构成标签" class="headerlink" title="1.构成标签"></a>1.构成标签</h3><blockquote><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;&lt;!-- 优先使用最新的ie版本 --&gt;&lt;title&gt;文档标题&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;资源所在路径&quot; type=&quot;规定被链接文档的MIME类型&quot; media=&quot;&quot; target=&quot;&quot; charset=&quot;定义编码方式&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;!--主体内容 显示在网页上的，由许多的标签组成--&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;  ...&lt;script src=&quot;引用文件地址&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt;     &lt;!--自己写的JavaScript代码，可在当前页面写，也可以另外写一个js文件，然后在引入 --&gt; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></blockquote><ul><li><p><code>&lt;!DOCTYPE HTML&gt;</code> 定义文档类型为html。这个声明是必要的，这个是用来声明文档类型，文档类型类似于连接，规定了HTML页面必须遵从良好的规定，能够自动检测错误和其他有用的东西</p></li><li><p><code>&lt;head&gt;&lt;/head&gt;</code>定义了文档相关信息。一般用于页面加载前先引用，所以用来加载css比较多</p></li><li><p><code>&lt;title&gt;&lt;/title&gt;</code> 定义的文档的标题</p></li><li><p><code>&lt;meta&gt;</code>定义文档的元信息，比如对页面进行描述，关键词，作者等。不会显示在网页上，常用属性有charset,name,http-equiv.content属性等；</p></li><li><p><code>&lt;link&gt;</code>用于链接式样式表，定义文档与外部资源的关系，关于什么是MIME类型，<a href="https://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="noopener">详情请看</a>有具体介绍；</p></li><li><p><code>&lt;!-- --&gt;</code>定义注解，注明一些信息。便于开发者和调试着浏览读懂代码</p></li><li><p><code>&lt;h1&gt; ~ &lt;h6&gt;</code>定义文章的字体大小常用于标题其中h1最大，h6最小；</p></li><li><p><code>&lt;p&gt;&lt;/p&gt;</code>段落标签。是块级属性（块级属性会独占一行）;</p></li><li><p><code>&lt;span&gt;&lt;/span&gt;</code>和<code>&lt;div&gt;&lt;/div&gt;</code>标签用法差不多都是定义文档节</p></li><li><p><code>&lt;iframe&gt;&lt;/iframe&gt;</code>定义文档的内联框架  </p><hr></li></ul><h3 id="2-表格标签"><a href="#2-表格标签" class="headerlink" title="2.表格标签"></a>2.表格标签</h3><table></table> 定义表格- `<th></th>` 定义表格的表头   <ul><li><p><code>&lt;tr&gt;&lt;/tr&gt;</code> 定义表格的行  </p></li><li><p><code>&lt;td&gt;&lt;/td&gt;</code> 定义表格的单元  </p></li><li><p><code>&lt;caption&gt;&lt;/caption&gt;</code> 定义表格标题  </p></li><li><p><code>&lt;thead&gt;&lt;thead&gt;</code> 定义表格中的表头内容  </p></li><li><p><code>&lt;tbody&gt;&lt;/tbody&gt;</code> 定义表格中的主体内容  </p></li><li><p><code>&lt;tfoot&gt;&lt;/tfood&gt;</code> 定义表格中的表注内容（脚注）    </p></li></ul><h3 id="3-列表标签"><a href="#3-列表标签" class="headerlink" title="3.列表标签"></a>3.列表标签</h3><p><code>&lt;ul&gt;&lt;/ul&gt;</code> 定义无序列表<br><code>&lt;ol&gt;&lt;/ol&gt;</code> 定义有序列表</p><p><code>&lt;li&gt;&lt;/li&gt;</code> 定义列表项</p><dl></dl> 定义列表`<dt></dt>` 自定义列表项目`<dd></dd>` 定义自定义列表的描述<h3 id="4-表单标签"><a href="#4-表单标签" class="headerlink" title="4.表单标签"></a>4.表单标签</h3><p><code>&lt;form&gt;&lt;/form&gt;</code> 定义供用户输入的表单</p><p><code>&lt;input&gt;</code> 定义输入控件，如密码框，输入框，按钮等</p><p><code>&lt;textarea&gt;&lt;/textarea&gt;</code> 定义文本域 （一个多行的输入控件）</p><p><code>&lt;label&gt;&lt;/label&gt;</code> 定义了 <code>&lt;input&gt;</code>元素的标签，一般为输入标题<br><code>&lt;filedset&gt;&lt;/filedset&gt;</code> 定义了一组相关的表单元素，并使用外框包含起来<br><code>&lt;legend&gt;&lt;/legend&gt;</code>定义了 <code>&lt;fieldset&gt;</code>元素的标题</p><p><code>&lt;select&gt;&lt;/select&gt;</code> 定义了下拉选项列表</p><p><code>&lt;optgroup&gt;&lt;/optgroup&gt;</code> 定义了下拉选项组<br><code>&lt;option&gt;&lt;/option&gt;</code> 定义下拉列表中的选项</p><p><code>&lt;button&gt;&lt;/button&gt;</code>定义一个点击按钮</p><h3 id="5-多媒体链接"><a href="#5-多媒体链接" class="headerlink" title="5.多媒体链接"></a>5.多媒体链接</h3><p><code>&lt;a&gt;&lt;/a&gt;</code> 定义一个超链接<br><code>&lt;img&gt;</code> 定义图像</p><p><embed></embed> 定义在页面中嵌入的内容，可插入音频视频等。</p><h3 id="6-格式标签"><a href="#6-格式标签" class="headerlink" title="6.格式标签"></a>6.格式标签</h3><p><code>&lt;b&gt;&lt;b/&gt;</code> 定义粗体文本<br><code>&lt;del&gt;&lt;/del&gt;</code> 定义被删除文本<br><code>&lt;em&gt;&lt;/em&gt;</code> 定义强调文本<br><code>&lt;i&gt;&lt;/i&gt;</code>定义斜体文本<br><code>&lt;sup&gt;&lt;/sup&gt;</code>定义上标文本<br><code>&lt;sub&gt;&lt;/sub&gt;</code> 定义下标文本</p><h2 id="HTML5新增的标签"><a href="#HTML5新增的标签" class="headerlink" title="HTML5新增的标签"></a>HTML5新增的标签</h2><h3 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1.语义化标签"></a>1.语义化标签</h3><pre><code>&lt;header&gt;头部&lt;/header&gt;&lt;nav&gt;导航&lt;/nav&gt;&lt;!--区域--&gt;&lt;section&gt;    &lt;aside&gt;侧边栏&lt;/aside&gt;    &lt;article&gt;文章&lt;/article&gt;&lt;/section&gt; &lt;figure&gt;&lt;img&gt;&lt;/img&gt;&lt;/figure&gt;&lt;footer&gt;底部&lt;/footer&gt;</code></pre><p><code>&lt;section&gt;&lt;/section&gt;</code>独立的内容块，可用h1~h6组成大纲，表示文档结构；</p><p><code>&lt;article&gt;&lt;/article&gt;</code> 用来在页面中表示一套结构完整且独立的内容部分</p><p><code>&lt;aslde&gt;&lt;/aside&gt;</code>主题的附属信息 ( 用途很广，主要就是一个附属内容 ) ，</p><h3 id="2-标签属性"><a href="#2-标签属性" class="headerlink" title="2.标签属性"></a>2.标签属性</h3><pre><code>    &lt;!--提示文本--&gt;    &lt;input type=&quot;text&quot; placeholder=&quot;请输入...&quot;&gt;&lt;br /&gt;    &lt;!--禁用--&gt;    &lt;input type=&quot;button&quot; value=&quot;提交&quot; disabled=&quot;disabled&quot;&gt;&lt;br /&gt;    &lt;form action=&quot;##&quot;&gt;        &lt;!--自动获取焦点--&gt;        &lt;input type=&quot;text&quot; autofocus=&quot;autofocus&quot; /&gt;&lt;br /&gt;        &lt;!--自动补全，off是默认值，配合name属性使用，name是组名的意思--&gt;        &lt;input type=&quot;text&quot; autocomplete=&quot;on&quot; name=&quot;sff&quot; /&gt;&lt;br /&gt;        &lt;!--非空验证--&gt;        &lt;input type=&quot;text&quot; required=&quot;required&quot; /&gt;&lt;br /&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;    &lt;/form&gt;</code></pre><ul><li><p>placecholder属性一般用于表单用户输入提示信息</p></li><li><p>disabled 属性表示禁用这个标签  </p></li></ul><h3 id="3-表单类型"><a href="#3-表单类型" class="headerlink" title="3.表单类型"></a>3.表单类型</h3><pre><code class="html">      &lt;form action=&quot;##&quot;&gt;          &lt;!-- 邮箱类型 --&gt;          &lt;input type=&quot;email&quot;&gt;&lt;br&gt;          &lt;!-- 网址类型 --&gt;          &lt;input type=&quot;url&quot;&gt;&lt;br&gt;          &lt;!-- 数字类型 --&gt;          &lt;input type=&quot;number&quot;&gt;&lt;br&gt;          &lt;!-- 颜色类型 --&gt;          &lt;input type=&quot;color&quot;&gt;&lt;br&gt;          &lt;!-- 搜索类型 --&gt;          &lt;input type=&quot;search&quot;&gt;&lt;br&gt;          &lt;!-- 本地时间类型 --&gt;          &lt;input type=&quot;datetime-local&quot;&gt;&lt;br&gt;          &lt;!-- 月份类型 --&gt;          &lt;input type=&quot;month&quot;&gt;&lt;br&gt;          &lt;!-- 周类型 --&gt;          &lt;input type=&quot;week&quot;&gt;&lt;br&gt;          &lt;!-- 时间类型 --&gt;          &lt;input type=&quot;time&quot;&gt;&lt;br&gt;          &lt;!-- 日期类型 --&gt;          &lt;input type=&quot;date&quot;&gt;&lt;br&gt;          &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;      &lt;/form&gt;</code></pre><h3 id="4-音频标签"><a href="#4-音频标签" class="headerlink" title="4.音频标签"></a>4.音频标签</h3><pre><code class="html">    &lt;!--        音频标签：audio        音频文件路径标签:source        属性：        controls  音频界面        loop  自动播放        autoplay  自动播放        由于音频标签对于每个浏览器，不是所有的样式都能识别，此时要对同一个文件引入多个音频格式    --&gt;    &lt;audio controls=&quot;controls&quot; loop=&quot;loop&quot; autoplay=&quot;autoplay&quot;&gt;        &lt;source src=&quot;music/yinyue.mp3&quot;&gt;&lt;/source&gt;        &lt;source src=&quot;music/yinyue.ogg&quot;&gt;&lt;/source&gt;    &lt;/audio&gt;</code></pre><h3 id="5-视频标签"><a href="#5-视频标签" class="headerlink" title="5.视频标签"></a>5.视频标签</h3><pre><code>    &lt;!--     视频标签的所有用法和音频一样     --&gt;     &lt;!-- 单个文件格式 --&gt;    &lt;!-- &lt;video src=&quot;video/movie.webm&quot; controls=&quot;controls&quot; loop=&quot;loop&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt; --&gt;    &lt;video controls=&quot;controls&quot; loop=&quot;loop&quot; autoplay=&quot;autoplay&quot;&gt;        &lt;source src=&quot;video/movie.ogg&quot;&gt;&lt;/source&gt;        &lt;source src=&quot;video/movie.mp4&quot;&gt;&lt;/source&gt;    &lt;/video&gt;</code></pre><h3 id="6-其他功能标签"><a href="#6-其他功能标签" class="headerlink" title="6.其他功能标签"></a>6.其他功能标签</h3><p>  (1）mark：标注（像荧光笔做笔记）</p><p>（2）progress：进度条；  </p><p><code>&lt;progress max=&quot;最大进度条的值&quot; value=&quot;当前进度条的值&quot;&gt;</code></p><p>（3）time：数据标签，给搜索引擎使用；发布日期<time datetime="2014-12-25T09:00">9：00</time>更新日期<time datetime="2015-01-23T04:00" pubdate>4:00</time></p><p>（4）ruby和rt：对某一个字进行注释；</p><p><code>&lt;ruby&gt;&lt;rt&gt;注释内容&lt;/rt&gt;&lt;rp&gt;浏览器不支持时如何显示&lt;/rp&gt;&lt;/ruby&gt;</code></p><p>（5）wbr：软换行，页面宽度到需要换行时换行；</p><p>（6）canvas：使用JS代码做内容进行图像绘制；</p><p>（7）command：按钮；</p><p>（8）deteils ：展开菜单；</p><p>（9）dateilst：文本域下拉提示；</p><p>（10）keygen:加密； </p><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>面试可能会考察到的点：</p><p>什么是HTML语义化？</p><blockquote><p>答：可以先回答一些常见的标签 header main footer section等等。可以根据内容的机构选择合适的标签，便于开发者阅读以及调试</p></blockquote><p>为什么要语义化？</p><blockquote><p>1.在没有css样式的情况下。页面也能展示良好的内容结构。代码结构。</p><p>2.用户体验：例如title ，alt用于解释名词或者解释图片信息还有label标签的活用等等;</p><p>3.便于团队开发和维护，语义化更具可读性，是下一步网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理对this请求的理解</title>
      <link href="/2020/07/18/zheng-li-dui-https-xie-yi-de-li-jie/"/>
      <url>/2020/07/18/zheng-li-dui-https-xie-yi-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="this关键字指向问题"><a href="#this关键字指向问题" class="headerlink" title="this关键字指向问题"></a>this关键字指向问题</h1><h2 id="this在各个场景下表示什么值"><a href="#this在各个场景下表示什么值" class="headerlink" title="this在各个场景下表示什么值"></a>this在各个场景下表示什么值</h2><ul><li>1.首先是在全局环境中的this.在全局环境中。this指向window对象;如：<br><code>alert(this)  //控制台输出（object.window）</code><br><code>alert(this === window);   // true</code>  </li><li>2.事件处理中的this 在事件处理函数中，this指向当前节点，就是说绑定事件的那个节点;  </li><li>3  构造函数中的this 构造函数中，this指向被创建的对象<br><img src="https://cdn.jsdelivr.net/gh/lucy-zheng123/cdn@1.1/images/lading.gif" data-original="https://i.loli.net/2020/07/18/nkVZyKPMCOYRzgm.png" alt=""><br>可以清楚发现调用者是谁this就指向谁，如果是自己调用则是参考1指向全局变量 <h2 id="改变指向问题"><a href="#改变指向问题" class="headerlink" title="改变指向问题"></a>改变指向问题</h2></li><li>了解了this的基本指向我们再来看看函数对象的call()、apply() 方法(这些方法原理上是改变了this的指向对象)<br>函数作为对象提供了call()，apply() 方法，他们也可以用来调用函数，这两个方法都接受一个对象作为参数，用来指定本次调用时函数中this的指向；</li></ul><p>call()方法<br>call方法使用的语法规则<br>函数名称.call(obj,arg1,arg2…argN);<br>参数说明:<br>obj:函数内this要指向的对象（像上面的student我可以改成其他对象））<br>arg1,arg2…argN :参数列表，参数与参数之间使用一个逗号隔开<br><img src="https://cdn.jsdelivr.net/gh/lucy-zheng123/cdn@1.1/images/lading.gif" data-original="https://i.loli.net/2020/07/18/wzPvl6rOsTDXnbH.png" alt=""><br>apply()方法<br>函数名称.apply(obj,[arg1,arg2…,argN])<br>参数说明:<br>obj :this要指向的对象<br>[arg1,arg2…argN] : 参数列表，要求格式为数组<br><img src="https://cdn.jsdelivr.net/gh/lucy-zheng123/cdn@1.1/images/lading.gif" data-original="https://i.loli.net/2020/07/18/OHxXFGg8ot7sTl4.png" alt="">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.两者所实现的功能都是改变this指向问题<br>2. 但是区别是 =&gt; call改变的是对象 =&gt; apply改变的是数组;  </p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建博客</title>
      <link href="/2020/07/17/kuai-su-da-jian-bo-ke/"/>
      <url>/2020/07/17/kuai-su-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="hexo基本搭建"><a href="#hexo基本搭建" class="headerlink" title="hexo基本搭建"></a>hexo基本搭建</h2><ul><li>搭建博客第一步需要安装相关的软件和搭配环境。这里就可以跟着脚本搭建<a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">脚本教程</a>到了这里你发现最基本的hexo已经搭建好在搭建好的hexoblog下执行hexo s 可以在本地查看 hex d 在github上可以查看，到这里第一步基本完成;  </li><li>个人遇到的问题  </li></ul><p>1.在一键生成秘钥的时候（部署到github必备的）这里是跟着脚本进行的结果发现在github那边显示需要自行加入秘钥。然后跟着提示进行操作拿到秘钥再通过命令<br><code>./install.sh git_ssh</code><br> 输入3成功连接 到这里第一步完成  </p><hr><h2 id="hexo-ui框架库matery主题"><a href="#hexo-ui框架库matery主题" class="headerlink" title="hexo ui框架库matery主题"></a>hexo ui框架库matery主题</h2><ul><li>然后在通过<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">这个网站</a>(matery官网)按照要求进行配置。主要git clone 的相关文件要放在them中。在hexoblog里面的_config.yml配置文件进行修改可以通过ctrl+f进行查找（这里用的是vscode工具）<br>找到并进行修改<code>theme: hexo-theme-matery</code><br>跟着github每步进行操作操作完执行<code>hexo clean &amp;&amp; hexo g &amp;&amp;hexo s</code>到这一步可以看到这个主题的基本样式这第二步完成当然可以参考<a href="https://blog.csdn.net/jspnetcn/article/details/104111651" target="_blank" rel="noopener">这篇博客</a>进行修改  </li><li>博客网页基本完成，然后如果想要写文章页面到里面的话在hexoblog 下打开git命令工具执行<code>hexo new &quot;你想写的博客名&quot;</code>然后可以在\hexoblog\source_posts 这个路径看到你生成的md的文件 这个md文件是用Markdown语法这里可以通过<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法</a>,<a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">Hexo系列(五)攥写文章</a>,<a href="https://blog.csdn.net/u011732358/article/details/83098211" target="_blank" rel="noopener">Markdown语法</a>进行学习操作<br>然后执行 hexo s 查看成功引入</li></ul><hr><h2 id="matery主题美化"><a href="#matery主题美化" class="headerlink" title="matery主题美化"></a>matery主题美化</h2><ul><li>这个网上有很多资料可以查看进行修改<a href="https://zhuanlan.zhihu.com/p/69211731" target="_blank" rel="noopener">hexo博客美化集合</a>,<a href="https://www.jianshu.com/p/a664545f155c" target="_blank" rel="noopener">hexo博客主题优化</a>，<a href="https://blog.csdn.net/cungudafa/article/details/106278206" target="_blank" rel="noopener">hexo博客细节优化</a>,<a href="https://fei.bar/2019/10/25/zhu-ti-zhe-teng-ji-lu/#%E5%9B%9B%E3%80%81%E4%BF%AE%E6%94%B9%E4%BA%86%E7%BD%91%E7%AB%99%E5%90%8D%E7%A7%B0%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2" target="_blank" rel="noopener">主题颜色优化</a>,<a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">美化出现的bug</a>跟着操作基本可以可以美化主题：  </li></ul><p> 1.遇到问题  写看板娘的时候出无法进行修改。然后通过知乎上一篇忘了在哪里的，不过要注意的是引入看板娘后要进行clean 从新编译比较好<br> 2.引入插件容易出现不兼容导致 hexo s 出现错误要小心，建议每次执行完都 hexo s 一下，容易定位出错的地方<br> 3.对于图片处理不是很好，修改图片大小以及背景色，发现图片格式得改为gif才会去除背景色，不然默认是白色背景</p><ul><li>美化所需的图片网站这里推荐一个免费看图<a href="https://alphacoders.com/" target="_blank" rel="noopener">看图地址</a>,还有需要进行图片修改的可以<a href="http://xiuxiu.web.meitu.com/main.html" target="_blank" rel="noopener">美图秀秀</a>进行操作修改;  </li></ul><hr><h1 id="cdn加速问题"><a href="#cdn加速问题" class="headerlink" title="cdn加速问题"></a>cdn加速问题</h1><h2 id="github-jsDelivr搭建免费cdn"><a href="#github-jsDelivr搭建免费cdn" class="headerlink" title="github+jsDelivr搭建免费cdn"></a>github+jsDelivr搭建免费cdn</h2><ul><li>操作到这一步的时候页面基本成型，在本地跑起来也比较快，不过在线上网站跑的时候速度异常慢，原因是本地图片加载过于缓慢，再加上github服务器在国外，对于国内访问不良好所导致的解决方法：<br>推荐这篇文章<a href="https://cungudafa.gitee.io/post/2a9.html" target="_blank" rel="noopener">搭建自己免费的cdn</a>,非常详细跟着操作就行，做完以后就会有自己的cdn,试着访问速度大大提升。图片加载速度还可以<br><code>git add . &amp;&amp; git commit -m &quot;第一次提交&quot; &amp;&amp; git push</code><br><img src="https://cdn.jsdelivr.net/gh/lucy-zheng123/cdn@1.1/images/lading.gif" data-original="https://i.loli.net/2020/07/18/XvkYwNFZU6Wj1PT.png" alt=""><br>在这里说下怎么把本地图片变成url =&gt;点击这个<a href="https://sm.ms/" target="_blank" rel="noopener">sm</a>轻量免费的图床<br>让图片上传。  </li><li>由于第一次接触cdn我就把它简单理解成把图片挂载在github+lsDelivr这个服务器上，然后把本地的图片路径改成你所对应的<code>https://cdn.jsdelivr.net/gh/</code>后面跟着就是你的github名字加图片所对应的地址  </li><li>还有就是图片懒加载的地址是放在 <code>hexo-theme-matery\source\images</code>这个目录下的;   </li><li>如果是首先启动界面动画的设置的话推荐这篇<a href="https://yafine-blog.cn/posts/7400.html" target="_blank" rel="noopener">loading-pages</a>只要引入js文件就可以了;</li><li>其他一些细节要注意看上面相关文章的点，里面都有详细介绍。 </li><li>再补充一下如果要修改背景音乐的话可以在主配置文件中找到音乐然后里面有提示可以根据提示修改<br><img src="https://cdn.jsdelivr.net/gh/lucy-zheng123/cdn@1.1/images/lading.gif" data-original="https://i.loli.net/2020/07/19/b5tPsXiy4grMJKU.png" alt=""><br>这里插入音乐链接的话我使用的是网易外部链接<a href="https://music.163.com/" target="_blank" rel="noopener">网易pc端</a>里面找到自己喜欢的歌曲然后点生成外链播放器在里面可以看到他会生成一段代码可以把那个链接的id数拷贝过来替代原来的id就可以了;但是如果看到的是由于版权保护，无法生成外链。那就看这篇文章<a href="https://www.cnblogs.com/cstdio1/p/11617357.html" target="_blank" rel="noopener">解决版权保护问题</a>，然后就可以添加啦  <h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2></li><li>再补充下怎么通过自己的域名打开至于注册域名的话可以去阿里云搜索自己的喜欢的域名注册到实名就不多说了做完后可以参考这篇<a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">绑定域名</a>域名购买也不贵当然是普通的。遇到的问题就是博客说的在 (注意：在这之前需要在站点根目录的 source 目录下新建一个 CNAME 文件，里面写入自己的域名，然后保存，在进行如下的步骤。这样到最后当你在地址栏输入<code>xxx.github.io</code>时，才会自动跳转到你的域名。)刚开始不理解CNAME文件是什么，通过网上资料发现是修改域名别名的。然后其实这个文件可以用记事本创建然后把后缀名删掉。创建完要  hexo &amp;&amp; clean &amp;&amp; hexo g &amp;&amp; hexo d 上传服务器,然后就跟着博客操作就行了  <h2 id="最后个人感受"><a href="#最后个人感受" class="headerlink" title="最后个人感受"></a>最后个人感受</h2></li><li>总体上还是可以的，就是细节处理不是很好，本来想加入天气插件发现效果不是很好放弃了。而且图片样式没选好，做不成很好看的博客，后续进行修改，总结花了4天时间，前两天疯狂踩坑，这个是第5个成型版本，不过相对的也让我操作娴熟了很多。然后就是第一次写经验的博客很多东西可能解释不是很完善。同时要感谢<a href="https://ling-collab.github.io/2020/071154549.html#vcomments" target="_blank" rel="noopener">于心所善</a>博主提供的文章解释。后续加油努力做得更好！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 总结搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端常用网站</title>
      <link href="/2020/07/17/web-qian-duan-chang-yong-wang-zhan/"/>
      <url>/2020/07/17/web-qian-duan-chang-yong-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="前端常用网站"><a href="#前端常用网站" class="headerlink" title="前端常用网站"></a>前端常用网站</h1><h2 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h2><ul><li>html5参考手册：<br><a href="https://www.w3school.com.cn/html5/html5_reference.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/html5/html5_reference.asp</a>   </li><li>css3动画：<br><a href="http://css.cuishifeng.cn/" target="_blank" rel="noopener">http://css.cuishifeng.cn/</a>  </li><li>loding动画：<br><a href="https://www.html5tricks.com/demo/css3-loading-cool-styles/index.html" target="_blank" rel="noopener">https://www.html5tricks.com/demo/css3-loading-cool-styles/index.html</a>  </li><li>特效动画库：<br><a href="https://animate.style/" target="_blank" rel="noopener">https://animate.style/</a>  </li><li>css布局<br><a href="https://animate.style/" target="_blank" rel="noopener">https://animate.style/</a>  </li><li>flex布局(基础语法篇)<br><a href="https://www.ruanyifeng.com/blog/2015/07/" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2015/07/</a><br>flex-grammar.html  </li><li>在线练习flex布局<br><a href="http://flexboxfroggy.com/" target="_blank" rel="noopener">http://flexboxfroggy.com/</a>  </li><li>Grid 网格布局<br><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a>  </li></ul><h2 id="JS-amp-ES6"><a href="#JS-amp-ES6" class="headerlink" title="JS &amp; ES6"></a>JS &amp; ES6</h2><ul><li>web学习<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/</a>  </li></ul><ul><li>JavaScript es6语法 （阮一峰）<br><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">https://es6.ruanyifeng.com/</a>  </li><li>正则<br><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.cn/tutorials/regex/regex.htm</a>  </li><li>可视化正则<br><a href="https://regexper.com/" target="_blank" rel="noopener">https://regexper.com/</a>  </li><li>Typescript<br><a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">https://www.tslang.cn/docs/home.html</a>    </li><li>有问题搜<br><a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a>  </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/16/hello-world/"/>
      <url>/2020/07/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 初始化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
